import java.sql.*;
import java.util.*;
import com.zeroio.iteam.base.*;
import org.aspcfs.utils.web.PagedListInfo;
import com.zeroio.utils.*;

// Page through the updates just in case there are lots of projects do 100 at a time...
PagedListInfo pagedListInfo = new PagedListInfo();
pagedListInfo.setItemsPerPage(100);
pagedListInfo.setDefaultSort("project_id", null);

// Use the paged list to populate it with the list criteria
ProjectList projects = new ProjectList();
projects.setPortalState(Constants.FALSE);
projects.setPagedListInfo(pagedListInfo);
projects.buildList(db);

System.out.println("Total projects to process: " + pagedListInfo.getMaxRecords());

int count = 0;
while (projects.size() > 0) {
  System.out.println(" Page: " + pagedListInfo.getPage() + " of " + pagedListInfo.getNumberOfPages());
  for (Project project : projects) {
    try {
      // Only update the ones that need updating
      if (!StringUtils.hasText(project.getUniqueId()) || project.getUniqueId().contains("+")) {
        ++count;
        ProjectUtils.updateUniqueId(db, project.getId(), project.getTitle());
      }
    } catch (Exception e) {
      e.printStackTrace(System.out);
      throw new Exception(e.getMessage());
    }
  }

  // Always reset the project list or else they are additive on buildList
  projects.clear();
  if (pagedListInfo.getPage() < pagedListInfo.getNumberOfPages()) {
      pagedListInfo.setCurrentPage(pagedListInfo.getPage() + 1);
      projects.buildList(db);
  }
}

System.out.println("   Total projects updated: " + count);
