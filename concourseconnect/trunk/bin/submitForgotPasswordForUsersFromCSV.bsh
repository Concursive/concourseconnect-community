#!/bin/sh                                                                                
//usr/bin/true; exec java -classpath .:lib/bsh-2.0b4.jar:./src/test/resources bsh.Interpreter "$0" "$@"

print("");

// Dynamically add to the classpath
File libDir = new File("lib");
if (libDir.isDirectory()) {
  String[] children = libDir.list();
  for (int i = 0; i < children.length; i++) {
    if (children[i].endsWith(".jar")) {
      addClassPath("lib/" + children[i]);
    }
  }
}

import au.com.bytecode.opencsv.CSVReader;

import com.concursive.commons.net.HTTPUtils;
import com.concursive.commons.text.StringUtils;

import java.net.URLEncoder;


if (bsh.args.length == 0) {
  print("Usage:");
  print("  submitForgotPasswordForUsersFromCSV [filename] [connect url] <offset> <limit>");
  print("");
  print("The specified file will be sent to the specified url");
  System.exit(0);
}
String filename = bsh.args[0].trim();
File csvFile = new File(filename);
if (!csvFile.exists()) {
  print("File does not exist: " + filename);
  System.exit(2);
}

String url = null;
if (bsh.args.length > 1) {
  url = bsh.args[1].trim();
}
if (!StringUtils.hasText(url) || !url.startsWith("http")) {
  throw new Exception("Invalid URL parameter: " + url);
}
if (url.endsWith("/")) {
  url = url.substring(0, url.length() - 1);
}

int skip = 0;
if (bsh.args.length > 2) {
  skip = Integer.parseInt(bsh.args[2].trim());
  print("Skipping " + skip);
}

int limit = 0;
if (bsh.args.length > 3) {
  limit = Integer.parseInt(bsh.args[3].trim());
  print("Limit " + limit);
}

System.out.println("Loading file... " + csvFile.toURL());
CSVReader reader = new CSVReader(new FileReader(csvFile));
String[] nextLine = reader.readNext();

//EMAIL
int emailColumn = -1;

for (int i = 0; i < nextLine.length; i++) {
  if (nextLine[i].trim().equalsIgnoreCase("EMAIL")) {
    emailColumn = i;
  }
}

if (emailColumn == -1) {
  throw new Exception("CSV column 'EMAIL' not found ()");
}

System.out.println("Sending records to: " + url);
System.out.println("");

// Submit the users
int count = skip;
while ((nextLine = reader.readNext()) != null &&
       (limit == 0 || (limit != 0 && count < limit))) {
  if (skip > 0) {
    --skip;
    continue;
  }
  
  ++count;
  if (count % 100 == 0) {
    System.out.println(count + "...");
  }

  String emailValue = nextLine[emailColumn].trim();

  if (StringUtils.hasText(emailValue) && !emailValue.contains("--------------------------------")) {
    String data = URLEncoder.encode(emailValue, "UTF-8");
    System.out.println("Sending... " + data);
    try {
      String response = HTTPUtils.get(url + "/ResetPassword.do?command=Reset&email=" + data);
      if (response == null || !response.contains("Your registration information has been emailed to")) {
        throw new Exception("Incorrect response");
      }
    } catch (Exception e) {
      System.out.println(emailValue);
    }
  }
}

System.out.println("Sent... " + count);
