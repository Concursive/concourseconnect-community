#!/bin/sh                                                                                
//bin/true; exec java -classpath .:$CATALINA_HOME/common/lib/servlet-api.jar:lib/bsh-2.0b4.jar:target/lib/concursive-commons.jar:target/lib/concourseconnect.jar:/usr/java/tomcat/common/lib/servlet-api.jar:lib/log4j-1.2.15.jar:lib/opencsv-1.8.jar bsh.Interpreter "$0" "$@"

import com.zeroio.utils.APIConnection;
import com.zeroio.utils.PhoneNumberUtils;
import com.zeroio.transfer.DataRecord;
import au.com.bytecode.opencsv.CSVReader;
import com.zeroio.iteam.base.Project;
import com.zeroio.iteam.base.ProjectCategory;
import com.zeroio.utils.StringUtils;
import java.util.Date;
com.zeroio.controller.UserList;
com.zeroio.controller.User;

if (bsh.args.length == 0) {
  print("Usage:");
  print("  importProjects [filename] <url> <code> <offset> <limit>");
  print("");
  print("The specified file will be sent to either 127.0.0.1 or the specified url");
  System.exit(0);
}
String filename = bsh.args[0].trim();

String url = "http://127.0.0.1";
String code = "";
if (bsh.args.length > 1) {
  url = bsh.args[1].trim();
  code = bsh.args[2].trim();
}

int skip = 0;
if (bsh.args.length > 3) {
  skip = Integer.parseInt(bsh.args[3].trim());
  print("Skipping " + skip);
}

int limit = 0;
if (bsh.args.length > 4) {
  limit = Integer.parseInt(bsh.args[4].trim());
  print("Limit " + limit);
}


print("Starting transaction...");

APIConnection conn = new APIConnection();
conn.setUrl(url);
//conn.setCode("098f6bcd4621d373cade4e832627b4f6");
conn.setCode(code);


// Example which adds a project and a team member in one transaction
File csvFile = new File(filename);
HashMap categoryNameIdMap = new HashMap();
HashMap subCategory1NameIdMap = new HashMap();

if (csvFile.exists()) {
  System.out.println("sendCSVProjects-> loadFile... " + csvFile.toURL());
  CSVReader reader = new CSVReader(new FileReader(csvFile));
  String[] nextLine = reader.readNext();
  //COMPANY_NAME, PRIMARY_ADDRESS, PRIMARY_CITY, PRIMARY_STATE, PRIMARY_ZIP_CODE, LATITUDE, LONGITUDE, PHONE
  //"Some Project","23262 Meetinghouse Ln","Aldie","VA","20105","","20105","","","107","","","","","","","","","038973797","077643612"
  // yahoo geo
  //38.974462 -77.643201
  // google map
  //&sll=38.975225,-77.643363
  //&latlng=38974431,-77643368

  int projectNameColumn = -1;
  int projectAddressColumn = -1;
  int projectCityColumn = -1;
  int projectStateColumn = -1;
  int projectZipColumn = -1;
  int projectLatitudeColumn = -1;
  int projectLongitudeColumn = -1;
  int projectPhoneColumn = -1;
  int projectCategoryColumn = -1;
  int projectSubCategory1Column = -1;
  int projectSubCategory2Column = -1;
  int projectWebsiteColumn = -1;

  for (int i = 0; i < nextLine.length; i++) {
    if (nextLine[i].equals("COMPANY_NAME")) {
      projectNameColumn = i;
    } else if (nextLine[i].equals("LATITUDE")) {
      projectLatitudeColumn = i;
    } else if (nextLine[i].equals("LONGITUDE")) {
      projectLongitudeColumn = i;
    } else if (nextLine[i].equals("PRIMARY_PHONE")) {
      projectPhoneColumn = i;
    } else if (nextLine[i].equals("PRIMARY_ADDRESS")) {
      projectAddressColumn = i;
    } else if (nextLine[i].equals("PRIMARY_CITY")) {
      projectCityColumn = i;
    } else if (nextLine[i].equals("PRIMARY_STATE")) {
      projectStateColumn = i;
    } else if (nextLine[i].equals("PRIMARY_ZIP_CODE")) {
      projectZipColumn = i;
    } else if (nextLine[i].equals("PROJECT_CATEGORY")){
      projectCategoryColumn = i;
    } else if (nextLine[i].equals("PROJECT_SUB_CATEGORY1")){
      projectSubCategory1Column = i;
    } else if (nextLine[i].equals("PROJECT_SUB_CATEGORY2")){
      projectSubCategory2Column = i;
    } else if (nextLine[i].equals("PROJECT_WEB_SITE")){
      projectWebsiteColumn = i;
    }
  }

  if (projectNameColumn == -1) {
    throw new Exception("CSV columns not found ()");
  }

  conn.setAutoCommit(true);
  // get the "modifiedBy" user...
  int primeUserId = -1;
  {
    //Add Meta Info with fields required
    ArrayList meta = new ArrayList();
    meta.add("id");
    conn.setTransactionMeta(meta);

    // Find the user...
    // Note that the user 'imports@connect321.com' must exist for this script to function...
    DataRecord record = new DataRecord();
    record.setName("userList");
    record.setAction(DataRecord.SELECT);
    record.addField("username", "imports@connect321.com");
    conn.save(record);

    int foundValue = Integer.parseInt(conn.getResponseValue("id"));
    primeUserId=foundValue;
    System.out.println("Using Prime UserId of : " + primeUserId);
  }

  // Insert the projects
  int count = 0;
  while ((nextLine = reader.readNext()) != null &&
         (limit == 0 || (limit != 0 && count < limit))) {

    if (skip > 0) {
      --skip;
      continue;
    }

    ++count;
    if (count % 100 == 0) {
      System.out.println(count + "...");
    }

    String projectNameValue = nextLine[projectNameColumn].trim();
    String projectLatitudeValue = "";
    if (projectLatitudeColumn != -1){
	    projectLatitudeValue = nextLine[projectLatitudeColumn].trim();
	  }

	  String projectLongitudeValue = "";
    if (projectLongitudeColumn != -1){
	    projectLongitudeValue = nextLine[projectLongitudeColumn].trim();
    }

    String projectPhoneValue = nextLine[projectPhoneColumn].trim();
    String projectAddressValue = nextLine[projectAddressColumn].trim();
    String projectCityValue = nextLine[projectCityColumn].trim();
    String projectStateValue = nextLine[projectStateColumn].trim();
    String projectZipValue = nextLine[projectZipColumn].trim();
    String projectWebsiteValue = nextLine[projectWebsiteColumn].trim();
    
    // normalizing phone numbers
    if (StringUtils.hasText(projectPhoneValue)){
    	if (projectPhoneValue.trim().length() == 8){
			  String projectPhoneValue = "757-" + projectPhoneValue;
		  }
    }

	  // normalizing website addresses
    if (StringUtils.hasText(projectWebsiteValue)){
      projectWebsiteValue = projectWebsiteValue.toLowerCase().trim();
    }

    // Fetching listing category (Businesses, Organizations, Groups, Events, etc.)
    String projectCategoryValue = "Businesses"; 
    if (projectCategoryColumn != -1){
    	projectCategoryValue = nextLine[projectCategoryColumn].trim();
    }
    
    // Use the subcategory to further define the category
    String projectSubCategory1Value = null;
    if (projectSubCategory1Column != -1){
    	projectSubCategory1Value = nextLine[projectSubCategory1Column].trim();
    }

    // Use the subcategory2 to further define the category, for now use as description
    String projectSubCategory2Value = null;
    if (projectSubCategory2Column != -1){
    	projectSubCategory2Value = nextLine[projectSubCategory2Column].trim();
    }

    // Determine if a business with the name, lat, long, phone already exists
    if (!"".equals(projectNameValue.trim())) {
      boolean exists = false;
      int existingId = -1;
      Project partialProject = null;

      conn.setAutoCommit(true);
      {
        // See if the project exists and update it
        ArrayList meta = new ArrayList();
        meta.add("id");
        meta.add("title");
        meta.add("latitude");
        meta.add("longitude");
        meta.add("businessPhone");
        conn.setTransactionMeta(meta);

        DataRecord record = new DataRecord();
        record.setName("projectList");
        record.setAction(DataRecord.SELECT);
        // Set the filters to query by
        record.addField("title", projectNameValue);
        conn.save(record);

        // In the meta section only a few properties were specified and will exist
        ArrayList projectObjects = conn.getRecords("com.zeroio.iteam.base.Project");
        for (Object projectObject : projectObjects) {
          partialProject = (Project) projectObject;
          //System.out.println("Checking Project : " + partialProject.getTitle());
          //System.out.println("Phone            : " + partialProject.getBusinessPhone() + "::" + PhoneNumberUtils.format(projectPhoneValue));
          if ((partialProject.getBusinessPhone() != null) &&
             (partialProject.getBusinessPhone().equals(PhoneNumberUtils.format(projectPhoneValue)))){
            //System.out.println("found a phone match: " +  partialProject.getBusinessPhone() + "::" + projectPhoneValue);
            //System.out.println("Business Name: " +  partialProject.getTitle());
   	        existingId = partialProject.getId();
          	break;
          }
        }
      }

    // Handle top-level category
	  int existingCategoryId = -1;
	  int existingSubCategory1Id = -1;
	  // fetch id for the category value only if it has not been fetched already.
	  if (StringUtils.hasText(projectCategoryValue)) {
	    if (!categoryNameIdMap.containsKey(projectCategoryValue)) {
	      conn.setAutoCommit(true);
        //Get project category id
        //System.out.println("projectCategoryValue " + projectCategoryValue);
          ArrayList meta = new ArrayList();
          meta.add("id");
          meta.add("categoryName");
          conn.setTransactionMeta(meta);

          DataRecord record = new DataRecord();
          record.setName("projectCategoryList");
          record.setAction(DataRecord.SELECT);
          // Set the filters to query by
          record.addField("categoryName", projectCategoryValue);
          conn.save(record);

          // In the meta section only a few properties were specified and will exist
          ArrayList projectCategoryObjects = conn.getRecords("com.zeroio.iteam.base.ProjectCategory");
          for (Object projectCategoryObject : projectCategoryObjects) {
            ProjectCategory partialProjectCategory = (ProjectCategory) projectCategoryObject;
            existingCategoryId = partialProjectCategory.getId();
          }
          categoryNameIdMap.put(projectCategoryValue, new Integer(existingCategoryId));
      }
	    existingCategoryId = ((Integer)categoryNameIdMap.get(projectCategoryValue)).intValue();
	    
      // Now that a valid parent category exists, get the subcategory id
	    if (StringUtils.hasText(projectSubCategory1Value)) {
	      if (!subCategory1NameIdMap.containsKey(existingCategoryId + projectSubCategory1Value)) {
          conn.setAutoCommit(true);
        //Get project category id
          ArrayList meta = new ArrayList();
          meta.add("id");
          meta.add("categoryName");
          conn.setTransactionMeta(meta);

          DataRecord record = new DataRecord();
          record.setName("projectCategoryList");
          record.setAction(DataRecord.SELECT);
          // Set the filters to query by
          record.addField("parentCategoryId", existingCategoryId);
          record.addField("categoryName", projectSubCategory1Value);

          conn.save(record);

          // In the meta section only a few properties were specified and will exist
          ArrayList projectCategoryObjects = conn.getRecords("com.zeroio.iteam.base.ProjectCategory");
          for (Object projectCategoryObject : projectCategoryObjects) {
            ProjectCategory partialProjectCategory = (ProjectCategory) projectCategoryObject;
            existingSubCategory1Id = partialProjectCategory.getId();
          }
          subCategory1NameIdMap.put(existingCategoryId + projectSubCategory1Value, new Integer(existingSubCategory1Id));
        }
        existingSubCategory1Id = ((Integer)subCategory1NameIdMap.get(existingCategoryId + projectSubCategory1Value)).intValue();
      }
	  }

      if (existingId > -1) {
        System.out.println("Updating record..." + count);
        // Update project
        DataRecord record = new DataRecord();
        record.setName("project");
        record.setAction(DataRecord.UPDATE);
        record.addField("id", existingId);
        record.addField("categoryId", existingCategoryId);
        if (existingSubCategory1Id > -1) {
          record.addField("subCategory1Id", existingSubCategory1Id);
        }
        record.addField("title", projectNameValue);
        if (StringUtils.hasText(projectSubCategory2Value)) {
          record.addField("shortDescription", projectSubCategory2Value);
        } else {
          record.addField("shortDescription", projectNameValue);
        }
        //TODO: Get current date
        //record.addField("requestDate", "2008-08-22 00:00:00 -0400");
        record.addField("addressLine1", projectAddressValue);
        record.addField("city", projectCityValue);
        record.addField("state", projectStateValue);
        record.addField("postalCode", projectZipValue);
        record.addField("latitude", projectLatitudeValue);
        record.addField("longitude", projectLongitudeValue);
        record.addField("businessPhone", projectPhoneValue);
        record.addField("enteredBy", primeUserId);
        record.addField("modifiedBy", primeUserId);
        record.addField("groupId", 1);
        conn.save(record);
      }

      if (existingId == -1) {
        System.out.println("Inserting record..." + count);
		//System.out.println(projectWebsiteValue);
        conn.setAutoCommit(false);
        {
        // Insert a new project
        DataRecord record = new DataRecord();
        record.setName("project");
        record.setAction(DataRecord.INSERT);
        record.setShareKey(true);
        record.addField("categoryId", existingCategoryId);
        if (existingSubCategory1Id > -1) {
          record.addField("subCategory1Id", existingSubCategory1Id);
        }
        record.addField("title", projectNameValue);
        if (StringUtils.hasText(projectSubCategory2Value)) {
          record.addField("shortDescription", projectSubCategory2Value);
        } else {
          record.addField("shortDescription", projectNameValue);
        }
        //TODO: Get current date
        //record.addField("requestDate", "2008-08-22 00:00:00 -0400");
        record.addField("source", "imported");
        record.addField("approved", "true");
        record.addField("addressLine1", projectAddressValue);
        record.addField("city", projectCityValue);
        record.addField("state", projectStateValue);
        record.addField("postalCode", projectZipValue);
        record.addField("latitude", projectLatitudeValue);
        record.addField("longitude", projectLongitudeValue);
        record.addField("businessPhone", projectPhoneValue);
        record.addField("enteredBy", primeUserId);
        record.addField("modifiedBy", primeUserId);
        record.addField("groupId", 1);
        record.addField("webPage", projectWebsiteValue);
        // Setting access preferences
        record.addField("updateAllowGuests", "true");
        record.addField("allowGuests", "true");
        record.addField("updateAllowParticipants", "true");
        record.addField("allowParticipants", "true");
        record.addField("updateMembershipRequired", "true");
        record.addField("membershipRequired", "false");
        conn.save(record);
        }

        {
        // Update the features
        DataRecord record = new DataRecord();
        record.setName("projectFeatures");
        record.setAction(DataRecord.UPDATE);
        record.addField("id", "$C{project.id}");

        //Setting tab preferences
        record.addField("showProfile", "true");
        record.addField("showNews", "true");
        record.addField("labelNews", "Blog");
        record.addField("showWiki", "true");
        record.addField("showDiscussion", "true");
        record.addField("showCalendar", "true");
        record.addField("showReviews", "true");
        record.addField("showAds", "true");
        record.addField("labelAds", "Promotions");
        record.addField("showDocuments", "true");
        record.addField("showLists", "true");
        record.addField("showTeam", "true");
        record.addField("labelTeam", "Members");
        record.addField("showBadges", "false");
        record.addField("modifiedBy", primeUserId);
        record.addField("modified", new Date());

        conn.save(record);
        }
        conn.commit();

      }

      if (conn.hasError()) {
        System.out.println("Commit error: " + conn.getErrorText());
        System.exit(2);
      }

    }
  }
} else {
  System.out.println("sendCSVProjects-> file does not exist: " + filename);
}
