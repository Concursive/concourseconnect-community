#!/bin/sh                                                                                
//usr/bin/true; exec java -classpath .:lib/bsh-2.0b4.jar:./src/test/resources bsh.Interpreter "$0" "$@"

print("");

// Dynamically add to the classpath
File libDir = new File("lib");
if (libDir.isDirectory()) {
  String[] children = libDir.list();
  for (int i = 0; i < children.length; i++) {
    if (children[i].endsWith(".jar")) {
      addClassPath("lib/" + children[i]);
    }
  }
}

import com.concursive.commons.net.HTTPUtils;
import com.concursive.commons.text.StringUtils;
import com.concursive.commons.db.*;

import java.net.URLEncoder;
import java.sql.*;

// Command line parameters
if (bsh.args.length < 2) {
  print("Usage:");
  print("  submitForgotPasswordForUnregisteredUsers [database name] [connect url] <offset> <limit>");
  print("");
  print("The database will be queried and requests will be sent to the specified url");
  System.exit(0);
}

// Database
String dbname = bsh.args[0];

// URL
String url = null;
if (bsh.args.length > 1) {
  url = bsh.args[1].trim();
}
if (!StringUtils.hasText(url) || !url.startsWith("http")) {
  throw new Exception("Invalid URL parameter: " + url);
}
if (url.endsWith("/")) {
  url = url.substring(0, url.length() - 1);
}

// Offset
int skip = 0;
if (bsh.args.length > 2) {
  skip = Integer.parseInt(bsh.args[2].trim());
  print("Skipping " + skip);
}

// Limit
int limit = 0;
if (bsh.args.length > 3) {
  limit = Integer.parseInt(bsh.args[3].trim());
  print("Limit " + limit);
}

// Database settings
String jdbc = "jdbc:postgresql://127.0.0.1:5432/" + dbname;
String user = "postgres";
String password = "";
String driver = "org.postgresql.Driver";

// Create a Connection Pool
ConnectionPool sqlDriver = new ConnectionPool();
sqlDriver.setDebug(false);
sqlDriver.setTestConnections(false);
sqlDriver.setAllowShrinking(true);
sqlDriver.setMaxConnections(2);
sqlDriver.setMaxIdleTime(60000);
sqlDriver.setMaxDeadTime(300000);

System.out.println("Sending records to: " + url);
System.out.println("");

// Create a connection
ConnectionElement ce = new ConnectionElement(jdbc, user, password);
ce.setDriver(driver);
Connection db = sqlDriver.getConnection(ce);

PreparedStatement pst = db.prepareStatement(
  "SELECT email, enabled " +
  "FROM users " +
  "ORDER BY user_id ");
ResultSet rs = pst.executeQuery();

// Submit the users
int count = skip;
int sent = 0;
while (rs.next() &&
       (limit == 0 || (limit != 0 && count < limit))) {

  // The total count processed
  ++count;
  if (count % 100 == 0) {
    System.out.println(count + "...");
  }

  // Skip if there is an offset
  if (skip > 0) {
    --skip;
    continue;
  }

  // Read in the fields
  String emailValue = rs.getString("email");
  boolean enabledValue = rs.getBoolean("enabled");

  // Validate and send email
  if (StringUtils.hasText(emailValue) && !emailValue.startsWith("---") &&
      !enabledValue) {
    String data = URLEncoder.encode(emailValue, "UTF-8");
    System.out.println("Sending... " + data);
    try {
      String response = HTTPUtils.get(url + "/ResetPassword.do?command=Reset&email=" + data);
      if (response == null || !response.contains("Your registration information has been emailed to")) {
        throw new Exception("Incorrect response");
      }
      ++sent;
    } catch (Exception e) {
      System.out.println(emailValue);
    }
  }
}

// Close resources
rs.close();
pst.close();
sqlDriver.free(db);
sqlDriver.destroy();

// Exit
System.out.println("Sent... " + sent + ", processed " + count + " records.");
